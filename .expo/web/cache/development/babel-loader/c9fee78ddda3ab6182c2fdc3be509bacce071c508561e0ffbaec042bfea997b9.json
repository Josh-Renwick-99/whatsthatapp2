{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport var postLogin = function _callee4(enableButton, handleSuccessfulLogin, showToast, email, password) {\n  var requestOptions;\n  return _regeneratorRuntime.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(email && password)) {\n            _context4.next = 6;\n            break;\n          }\n          requestOptions = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: email,\n              password: password\n            })\n          };\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(fetch('http://10.0.2.2:3333/api/1.0.0/login', requestOptions).then(function _callee(response) {\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!(response.status === 200)) {\n                      _context.next = 5;\n                      break;\n                    }\n                    showToast(\"Login Successful!\");\n                    return _context.abrupt(\"return\", response.json());\n                  case 5:\n                    if (response.status === 400) {\n                      showToast(\"Invalid login credentials :(\");\n                    } else {\n                      showToast(\"Oops, something went wrong\");\n                    }\n                  case 6:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }).then(function _callee2(responseJson) {\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    console.log(responseJson);\n                    _context2.prev = 1;\n                    _context2.next = 4;\n                    return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"WhatsThat_usr_id\", responseJson.id.toString()));\n                  case 4:\n                    _context2.next = 6;\n                    return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"WhatsThat_usr_token\", responseJson.token));\n                  case 6:\n                    _context2.next = 11;\n                    break;\n                  case 8:\n                    _context2.prev = 8;\n                    _context2.t0 = _context2[\"catch\"](1);\n                    throw \"Something went wrong\";\n                  case 11:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, [[1, 8]], Promise);\n          }).then(function () {\n            enableButton;\n          }).then(function _callee3() {\n            return _regeneratorRuntime.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    handleSuccessfulLogin();\n                  case 1:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n        case 4:\n          _context4.next = 8;\n          break;\n        case 6:\n          showToast(\"Login credentials cannot be empty\");\n          enableButton;\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var postRegister = function _callee7(showToast, enableButton, firstName, lastName, email, password) {\n  var requestOptions;\n  return _regeneratorRuntime.async(function _callee7$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          requestOptions = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              first_name: firstName,\n              last_name: lastName,\n              email: email,\n              password: password\n            })\n          };\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(fetch('http://10.0.2.2:3333/api/1.0.0/user', requestOptions).then(function _callee5(response) {\n            return _regeneratorRuntime.async(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    if (!(response.status === 201)) {\n                      _context5.next = 5;\n                      break;\n                    }\n                    showToast(\"Registration Successful!\");\n                    return _context5.abrupt(\"return\", response.json());\n                  case 5:\n                    if (response.status === 400) {\n                      showToast(\"Invalid email address :( \");\n                    } else {\n                      showToast(\"Oops, something went wrong\");\n                    }\n                  case 6:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }).then(function _callee6(rJson) {\n            return _regeneratorRuntime.async(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    console.log(rJson);\n                  case 1:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }).then(function () {\n            enableButton();\n          }));\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["AsyncStorage","postLogin","_callee4","enableButton","handleSuccessfulLogin","showToast","email","password","requestOptions","_regeneratorRuntime","async","_callee4$","_context4","prev","next","method","headers","body","JSON","stringify","awrap","fetch","then","_callee","response","_callee$","_context","status","abrupt","json","stop","Promise","_callee2","responseJson","_callee2$","_context2","console","log","setItem","id","toString","token","t0","_callee3","_callee3$","_context3","postRegister","_callee7","firstName","lastName","_callee7$","_context7","first_name","last_name","_callee5","_callee5$","_context5","_callee6","rJson","_callee6$","_context6"],"sources":["C:/Users/Joshua/Downloads/AnimatedAuthAssetBundle/AnimatedAuthAssetBundle/AnimatedAuthP2/util/Client.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport const postLogin = async (enableButton, handleSuccessfulLogin, showToast, email, password) => {\r\n\r\n    if(email && password){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ email: email, password: password })\r\n        };   \r\n\r\n        await fetch(\r\n            'http://10.0.2.2:3333/api/1.0.0/login', requestOptions)\r\n            .then(async (response) => {\r\n            if (response.status === 200) {\r\n                showToast(\"Login Successful!\")\r\n                return response.json()\r\n            } else if (response.status === 400){\r\n                showToast(\"Invalid login credentials :(\")\r\n            } else {\r\n                showToast(\"Oops, something went wrong\")\r\n            }\r\n        })\r\n        .then(async (responseJson) => {\r\n            console.log(responseJson)\r\n            try {\r\n                await AsyncStorage.setItem(\"WhatsThat_usr_id\", responseJson.id.toString())\r\n                await AsyncStorage.setItem(\"WhatsThat_usr_token\", responseJson.token)\r\n            } catch {\r\n                throw \"Something went wrong\"\r\n            }\r\n        })\r\n        .then(() =>{\r\n            enableButton\r\n        }).then( async () => {\r\n            handleSuccessfulLogin()\r\n        })\r\n    } else {\r\n        showToast(\"Login credentials cannot be empty\")\r\n        enableButton\r\n    }\r\n}\r\n\r\nexport const postRegister = async (showToast, enableButton, firstName, lastName, email, password) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ \r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            email: email,\r\n            password: password})\r\n      };\r\n      \r\n      await fetch(\r\n          'http://10.0.2.2:3333/api/1.0.0/user', requestOptions)\r\n          .then(async (response) => {\r\n            if (response.status === 201) {\r\n                showToast(\"Registration Successful!\")\r\n                return response.json()\r\n            } else if (response.status === 400){\r\n                showToast(\"Invalid email address :( \")\r\n            } else {\r\n                showToast(\"Oops, something went wrong\")\r\n            }\r\n        })\r\n        .then(async (rJson) => {\r\n            console.log(rJson)\r\n        })\r\n        .then(() =>{\r\n            enableButton();\r\n        })\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}